" Enable VIM extensions

set nocompatible
set modelines=0

" Standard Vundle setup

filetype off                  " required
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()
Plugin 'VundleVim/Vundle.vim'
" All of your Plugins must be added before the following line
Plugin 'vimwiki/vimwiki'
call vundle#end()             " required

" Brief help
" :PluginList       - lists configured plugins
" :PluginInstall    - installs plugins; append `!` to update or just :PluginUpdate
" :PluginSearch foo - searches for foo; append `!` to refresh local cache
" :PluginClean      - confirms removal of unused plugins; append `!` to auto-approve removal
"
" see :h vundle for more details or wiki for FAQ

filetype plugin indent on

" Colors & fonts

if has("gui_running")
    if has("gui_macvim")
        let macvim_skip_colorscheme=1
    endif
    set guifont=Consolas:h12,Menlo:h15 " My favorite fonts
    "set guifontwide=NSimSun
    set lines=36 columns=150
    winp 100 30
endif

" Spaces, tabs and indenting

set expandtab       " insert spaces instead of tabs
set tabstop=8       " number of visual spaces per TAB (8 for compat with other apps)
set softtabstop=4   " number of spaces in tab when editing
set shiftwidth=4    " number of columns to shift with <<, >>
set shiftround      " round indent to multiple of 'shiftwidth'
set autoindent      " align the new line indent with the previous line 
set copyindent      " copy the previous indentation on autoindenting
set smartindent
set backspace=indent,eol,start
set smarttab        " insert tabs on the start of a line according to shiftwidth (not tabstop)

set ttimeout
set ttimeoutlen=100

" UI config

colorscheme zenburn
syntax enable	        " enable syntax highlighting
set nonumber            " don't show line numbers
set showmode            " show VIM mode in bottom bar
set showcmd             " show pending command in bottom bar
set ruler               " show cursor position in bottom bar
set noerrorbells        " don't beep on error messages
set visualbell          " flash screen instead of beeping on invalid keys, etc.
set cursorline          " highlight current line
set wildmenu            " visual autocomplete for command menu
set wildignore=*.swp,*.bak,*.pyc,*.class    " ignore these file extensions when completing
set laststatus=1        " last file has status line if multiple windows present
set ttyfast             " smoother redrawing for multiple windows

if has('win32') || has('win64')
  set runtimepath=$HOME/.vim,$VIM/vimfiles,$VIMRUNTIME,$VIM/vimfiles/after,$HOME/.vim/after
endif
set showmatch           " highlight matching [{()}]
set autoindent
set smartindent
set cmdheight=2         " allow 2 lines on bottom for longer error messages
set clipboard=unnamed   " use system clipboard for default cut/copy/paste operations

" Searching

set incsearch           " search as characters are entered
set hlsearch            " highlight matches
" Use <C-L> to clear the highlighting of :set hlsearch.
if maparg('<C-L>', 'n') ==# ''
  nnoremap <silent> <C-L> :nohlsearch<C-R>=has('diff')?'<Bar>diffupdate':''<CR><CR><C-L>
endif
set ignorecase          " ignore case when searching
set smartcase           " unless I specify some uppercase letters
"set gdefault            " replace all occurrences on each line by default
set tags=./tags;

" Folding

set foldenable          " enable folding
set foldlevelstart=10   " open most folds by default
set foldnestmax=10      " 10 nested fold max
"nnoremap <space> za	" space open/closes folds
set foldmethod=indent   " fold based on indent level

" Movement

" move vertically by visual line
"nnoremap j gj
"nnoremap k gk

" Backup files

set nowritebackup
set nobackup
set noswapfile

set hidden              " switch between buffers w/o saving

" File encoding

set encoding=utf-8

" Makefile settings

autocmd filetype make call SetMakeOptions()
function SetMakeOptions()
    setlocal tabstop=4
    setlocal noexpandtab
endfunction

" C-language settings

autocmd filetype c\|c++ call SetCOptions()
function SetCOptions()
    setlocal tabstop=4
    setlocal softtabstop=4
    setlocal shiftwidth=4
    setlocal expandtab
    setlocal autoindent
    noremap <buffer> <F7> :make "CFLAGS=-g -Wall -std=gnu11 -O0" %:t:r<CR>
endfunction

" Python settings

autocmd filetype python call SetPythonOptions()
function SetPythonOptions()
    setlocal tabstop=4
    setlocal softtabstop=4
    setlocal shiftwidth=4
    setlocal expandtab
    setlocal autoindent
    nnoremap <buffer> <F7> :exec '!clear; python' shellescape(@%, 1)<cr>
    filetype on
endfunction

" Use spacebar for <leader>, but in a way that preserves showcmd (somewhat)
"let mapleader = "\<Space>"
map <Space> <leader>
 
" Switch between files in buffer

noremap <C-Tab> :bn<CR>
noremap <C-S-Tab> :bp<CR>

" Navigate through errors, grep results, etc.

map <C-j> :cn<CR>
map <C-k> :cp<CR>

" Function key bindings

" switch between header/source with F4
map <F4> :e %:p:s,.h$,.X123X,:s,.cpp$,.h,:s,.X123X$,.cpp,<CR>

" recreate tags file with F5
map <F5> :!ctags -R --c++-kinds=+p --fields=+iaS --extra=+q .<CR>

" create doxygen comment
map <F6> :Dox<CR>

" build using makeprg with <F7>
"map <F7> :make<CR>

" build using makeprg with <S-F7>
"map <S-F7> :make clean all<CR>

" goto definition with F12
map <F12> <C-]>

" Permit project-specific Vim settings
set exrc
set secure

