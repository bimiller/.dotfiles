
# Default tool settings.

export PS1="\W \$ "
#export EDITOR='subl -w'
<<<<<<< HEAD
#export EDITOR="mvim -f -c \"au VimLeave * maca hide:\""
#export EDITOR="emacs -nw"
export ALTERNATE_EDITOR=emacs
export EDITOR=emacsclient
export VISUAL="$EDITOR"
=======
export EDITOR="mvim -f -c \"au VimLeave * maca hide:\""
export VISUAL=$EDITOR
>>>>>>> 6cc59d9be4f16441666e59e018e214a9fb2b428e
export LESS="-R"
export PAGER=less

# Use Homebrew utils instead of ancient Mac versions.

if [ -d "/usr/local/opt/coreutils/libexec/gnubin" ]; then
    export PATH="/usr/local/opt/coreutils/libexec/gnubin:${PATH}"
    export MANPATH="/usr/local/opt/coreutils/libexec/gnuman:/usr/local/share/man:${MANPATH-/usr/share/man}"
fi

if [ -d "/usr/local/opt/findutils/libexec/gnubin" ]; then
    export PATH="/usr/local/opt/findutils/libexec/gnubin:${PATH}"
    export MANPATH="/usr/local/opt/findutils/libexec/gnuman:/usr/local/share/man:${MANPATH-/usr/share/man}"
fi

if [ -d "/Applications/MacVim.app/Contents/bin" ]; then
    export PATH="/Applications/MacVim.app/Contents/bin:${PATH}"
fi

# Enable Bash completions when using Homebrew Bash

if [ -f /usr/local/etc/bash_completion ]; then
    source /usr/local/etc/bash_completion
fi

# Python development settings.

if command -v pyenv 1>/dev/null 2>&1; then
    eval "$(pyenv init -)"              # insert pyenv shims into PATH
    eval "$(pyenv virtualenv-init -)"   # include virtualenv support
<<<<<<< HEAD

    #export PYENV_VIRTUALENV_DISABLE_PROMPT=1
fi

export PIP_REQUIRE_VIRTUALENV=true

export PIPENV_DEFAULT_PYTHON_VERSION="3.6"

# SAP HANA client tools.

if [ -d "/usr/sap/hdbclient" ]; then
    export PATH="${PATH}:/usr/sap/hdbclient"
fi

=======

#    export PYTHON_CONFIGURE_OPTS="--enable-shared"     # required for many (gui) modules

    #export PYENV_VIRTUALENV_DISABLE_PROMPT=1
fi

export PIP_REQUIRE_VIRTUALENV=true

export PIPENV_DEFAULT_PYTHON_VERSION="3.6"

export NLTK_DATA="~/Documents/Datasets/nltk_data"

>>>>>>> 6cc59d9be4f16441666e59e018e214a9fb2b428e
# Java development settings.

if [ $(uname -s) == "Darwin" ]; then
    export JAVA_HOME=$(/usr/libexec/java_home -v 1.8)
else
    export JAVA_HOME=/opt/jdk1.8.0_60
fi

if [ -d "${JAVA_HOME}/bin" ] ; then
    export PATH="${PATH}:${JAVA_HOME}/bin"
<<<<<<< HEAD
fi

# Hadoop/Spark development settings.

if [ -d "/SAPDevelop/hadoop/hadoop-2.7.3" ]; then
    export HADOOP_HOME="/SAPDevelop/hadoop/hadoop-2.7.3"
    export PATH="$PATH:$HADOOP_HOME/bin:$HADOOP_HOME/sbin"
fi

if [ -d "/SAPDevelop/spark/spark-2.1.0-bin-hadoop2.7" ]; then
    export SPARK_HOME="/SAPDevelop/spark/spark-2.1.0-bin-hadoop2.7"
    export PATH="$PATH:$SPARK_HOME/bin"
fi

# SAP development environment.

if [ -d "/SAPDevelop/bin" ] ; then
    export PATH="${PATH}:/SAPDevelop/bin"
fi

if [ -d "/SAPDevelop/XSA/bin" ] ; then
    export PATH="${PATH}:/SAPDevelop/XSA/bin"
fi

if [ -d "/hana/shared/WAM/xs/bin" ]; then
    export PATH="${PATH}:/hana/shared/WAM/xs/bin"
fi

export TASDK_BUILD_TYPE="Debug"

export DAT_BIN_DIR="/SAPDevelop/tasdk/build/${TASDK_BUILD_TYPE}/gen/dat_bin_dir"
export TASDK_LANG_DIR="/SAPDevelop/tasdk/build/${TASDK_BUILD_TYPE}/gen/sar_dat_lexicon/trexlanguages"

if [ -d "${DAT_BIN_DIR}" ] ; then
    export PATH="${PATH}:${DAT_BIN_DIR}"
    export LD_LIBRARY_PATH="${LD_LIBRARY_PATH}:${DAT_BIN_DIR}:${DAT_BIN_DIR}/..:${DAT_BIN_DIR}/filter"
    export DYLD_LIBRARY_PATH="${DYLD_LIBRARY_PATH}:${LD_LIBRARY_PATH}"
fi

# Detect and configure SAP SAP proxy settings.

#ping -q -o proxy &>/dev/null
#if [ $? == 0 ]; then
#    export http_proxy=http://proxy:8080
#    export https_proxy=${http_proxy}
#    export no_proxy="$(hostname -f), $(hostname), $no_proxy"
#fi

# Set PATH so it includes user's private bin if it exists.

=======
fi

# Set PATH so it includes user's private bin if it exists.

>>>>>>> 6cc59d9be4f16441666e59e018e214a9fb2b428e
if [ -d "${HOME}/bin" ] ; then
  export PATH="${PATH}:${HOME}/bin"
fi

# Private settings (not shared on GitHub).

if [ -f "${HOME}/.profile_private" ]; then
  source "${HOME}/.profile_private"
fi

# If running bash then source the bashrc file.

if [ -n "${BASH_VERSION}" ]; then
  if [ -f "${HOME}/.bashrc" ]; then
    source "${HOME}/.bashrc"
  fi
fi

<<<<<<< HEAD
# happy make (installed on 2016-10-12 15:50:02.968116)
if [ -f "${HOME}/.HappyMake/etc/hminit.sh" ]; then
    source "${HOME}/.HappyMake/etc/hminit.sh"
fi

=======
>>>>>>> 6cc59d9be4f16441666e59e018e214a9fb2b428e
