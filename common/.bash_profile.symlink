export BASH_SILENCE_DEPRECATION_WARNING=1

#-------------------------------------------------------------------
# Default tool settings.
#-------------------------------------------------------------------

export PS1='\W \$ '
#export EDITOR=emacsclient
#export ALTERNATE_EDITOR=emacs
#export EDITOR="emacs -nw"
export EDITOR='mvim -f --nomru -c "au VimLeave * maca hide:"'
export VISUAL="$EDITOR"
export LESS="-R"
export PAGER=less

#-------------------------------------------------------------------
# Use Homebrew packages instead of ancient Mac versions.
#-------------------------------------------------------------------

export PATH="/usr/local/bin:/usr/local/sbin:${PATH/:\/usr\/local\/bin}"
#export MANPATH="/usr/local/share/man:/usr/share/man"

# GNU core/find utils

if [ -d "/usr/local/opt/coreutils/libexec/gnubin" ]; then
    export PATH="/usr/local/opt/coreutils/libexec/gnubin:${PATH}"
    #export MANPATH="/usr/local/opt/coreutils/libexec/gnuman:${MANPATH}"
    eval "`dircolors -b ~/.dir_colors`"  # Set LS_COLORS env variable
fi

if [ -d "/usr/local/opt/findutils/libexec/gnubin" ]; then
    export PATH="/usr/local/opt/findutils/libexec/gnubin:${PATH}"
    #export MANPATH="/usr/local/opt/findutils/libexec/gnuman:${MANPATH}"
fi

# Node.js binaries

if [ -d "/usr/local/opt/node@12/bin" ]; then
    export PATH="/usr/local/opt/node@12/bin:${PATH}"
fi

# Python(3) binaries

if [ -d "/usr/local/opt/python/libexec/bin" ]; then
    export PATH="/usr/local/opt/python/libexec/bin:${PATH}"
fi

# Emacs

#if [ -d "/Applications/Emacs.app/Contents/Resources/man" ]; then
#    export MANPATH="/Applications/Emacs.app/Contents/Resources/man:$MANPATH"
#fi

# Macvim

if [ -d "/Applications/MacVim.app/Contents/bin" ]; then
    export PATH="/Applications/MacVim.app/Contents/bin:${PATH}"
fi

# Add VS Code (code) to PATH.

if [ -d "/Applications/Visual Studio Code.app/Contents/Resources/app/bin" ]; then
   export PATH="/Applications/Visual Studio Code.app/Contents/Resources/app/bin:${PATH}"
fi

# Add Rust toolchain to PATH.

if [ -d "${HOME}/.cargo/bin" ]; then
    export PATH="${PATH}:${HOME}/.cargo/bin"
fi

# Enable Bash completions when using Homebrew Bash

if [ -f /usr/local/etc/bash_completion ]; then
    source /usr/local/etc/bash_completion
fi

# Python development settings.

#if command -v pyenv 2>/dev/null 2>&1; then
#    eval "$(pyenv init -)"              # insert pyenv shims into PATH
#    if command -v pyenv-virtualenv >/dev/null 2>&1; then
#        eval "$(pyenv virtualenv-init -)"   # include virtualenv support
#    fi
#    export PYENV_VIRTUALENV_DISABLE_PROMPT=1
#    # export PYTHON_CONFIGURE_OPTS="--enable-framework"  # required for many (gui) modules
#fi

export PIP_REQUIRE_VIRTUALENV=true # protect me from myself

#export PIPENV_DEFAULT_PYTHON_VERSION="3.6"

#export NLTK_DATA="~/Documents/Datasets/nltk_data"

# >>> conda initialize >>>
# !! Contents within this block are managed by 'conda init' !!
__conda_setup="$('/Users/bill/miniconda3/bin/conda' 'shell.bash' 'hook' 2> /dev/null)"
if [ $? -eq 0 ]; then
    eval "$__conda_setup"
else
    if [ -f "/Users/bill/miniconda3/etc/profile.d/conda.sh" ]; then
        . "/Users/bill/miniconda3/etc/profile.d/conda.sh"
    else
        export PATH="/Users/bill/miniconda3/bin:$PATH"
    fi
fi
unset __conda_setup
# <<< conda initialize <<<

# Java development settings.

if [ $(uname -s) == "Darwin" ]; then
    export JAVA_HOME=$(/usr/libexec/java_home -v 1.8)
else
    export JAVA_HOME=/opt/jdk1.8.0_60
fi

if [ -d "${JAVA_HOME}/bin" ] ; then
    export PATH="${PATH}:${JAVA_HOME}/bin"
fi

# Spark development settings

SPARK_HOME=`ls -d $HOME/Tools/spark-[0-9]*`

if [ -d "$SPARK_HOME" ] ; then
    export SPARK_HOME
    export PATH="$PATH:$SPARK_HOME/bin"
fi

# Hadoop development settings

HADOOP_HOME=`ls -d $HOME/Tools/hadoop-[0-9]*`

if [ -d "$HADOOP_HOME" ] ; then
    export HADOOP_HOME
    export PATH="$PATH:$HADOOP_HOME/bin:$HADOOP_HOME/sbin"
fi

# Set PATH so it includes user's private bin if it exists.

if [ -d "${HOME}/bin" ] ; then
  export PATH="${PATH}:${HOME}/bin"
fi

# Private settings (not shared on GitHub).

if [ -f "${HOME}/.profile_private" ]; then
  source "${HOME}/.profile_private"
fi

# If running bash then source the bashrc file.

if [ -n "${BASH_VERSION}" ]; then
  if [ -f "${HOME}/.bashrc" ]; then
    source "${HOME}/.bashrc"
  fi
fi

